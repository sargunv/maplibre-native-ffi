#Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

#Lessons

## User Specified Lessons

- Don't fix lints, unless I explicitly ask you to fix a lint for your task.
- This project is intended to be a set of C bindings for using maplibre native.
- My goal is to eventually use it to make map apps in other languages, like Kotlin Native, Kotlin JVM, Rust, and so on on platforms like macOS, Linux, Windows, Android, and iOS.
- Our bindings are prefixed with `MLN_`. For example, `MLN_TypeName_methodName`.
- We manage C++ objects as `void *`.
- We write very modern C/C++, with clang-tidy for enforcement. This means `using`, `auto`, trailing return types, etc.
- Setter methods should use `set` prefix (e.g. `MLN_MapOptions_setSize`), not `with` prefix.
- Constructor/destructor pairs should use `new`/`delete` (e.g. `MLN_MapOptions_new`, `MLN_MapOptions_delete`), not `create`/`destroy`.
- Getter methods should not use `get` prefix (e.g. `MLN_MapOptions_size`, not `MLN_MapOptions_getSize`).
- Always run `just format` after making code changes to ensure consistent formatting.
- Never use `using namespace`. Always use qualified names.
- The full maplibre-native source is available in ./build/_deps/maplibre-native-src

## Cursor learned

- Project uses CMake as build system, with clang-format and clang-tidy for code quality
- Project uses justfile for common development tasks like building, formatting, and linting
- Each component should have unit tests to verify the bindings work correctly
- Tests are organized in a single executable with each component's tests in a separate file
- Test functions should be in an anonymous namespace and each test file should expose a run_*_tests() function
- MapLibre Native's renderer architecture consists of:
  - Backend: Platform-specific graphics API implementation (Metal/OpenGL/Vulkan)
  - Frontend: Coordinates between Map and Backend, handles when to render
  - View: Manages window/view lifecycle and input handling
- For Metal specifically:
  - Backend needs MTKView or similar Metal-capable view
  - Rendering should happen on main thread
  - Need proper resource management for Metal objects
  - Should support view resizing and orientation changes

#Scratchpad

Current Task: Understanding MapLibre Native's Metal renderer for FFI implementation

Key Components to Expose:
[X] Metal Backend creation/configuration
[X] Renderer Frontend interface
[ ] View/Window management (implementation)
[ ] Resource cleanup and lifecycle management (implementation)

Implementation Strategy:
1. Create C bindings that allow users to:
   [X] Initialize Metal rendering context with their own MTKView
   [X] Configure rendering parameters
   [X] Handle view lifecycle events
   [X] Clean up resources properly

2. Keep the API simple but flexible:
   [X] Hide complex C++ template machinery
   [X] Expose only necessary configuration options
   [X] Provide clear ownership semantics
   [X] Document threading requirements

3. Focus on macOS/iOS specific needs:
   [X] Metal is Apple-specific, so we can be platform-opinionated
   [X] Integrate well with platform conventions
   [X] Support both MTKView and CAMetalLayer cases

Next Steps:
1. Implement MetalRendererBackend.mm:
   [X] Create the C++ wrapper class
   [X] Implement the Metal backend creation/deletion
   [X] Handle view size updates and invalidation
   [X] Simplify FFI to just new/delete

2. Implement MetalRendererFrontend.mm:
   [ ] Create the C++ wrapper class
   [ ] Implement rendering coordination
   [ ] Handle state updates
   [ ] Keep FFI minimal with just new/delete

3. Create unit tests:
   [ ] Test backend creation/deletion
   [ ] Test frontend creation/deletion
   [ ] Test internal view lifecycle events
   [ ] Test internal rendering coordination

Notes:
- Simplified FFI approach: Only expose new/delete for both backend and frontend
- Internal coordination: Frontend handles view updates and invalidation
- View lifecycle: Managed internally through MTKView delegate pattern
- Resource cleanup: Handled automatically through RAII

Would you like me to proceed with implementing the Metal renderer frontend next?

